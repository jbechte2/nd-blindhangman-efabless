# import random

# words = [
#     "chapel",
#     "spire",
#     "faith",
#     "bells",
#     "organ",
#     "pious",
#     "saint",
#     "grace",
#     "choir",
#     "cross",
#     "altar",
#     "crypt",
#     "relic",
#     "faith",
#     "bless",
#     "stone",
#     "mural",
#     "angel",
#     "faith",
#     "clove",
#     "clergy",
#     "prayer",
#     "sacred",
#     "Latin",
#     "relic",
#     "faith",
#     "hymns",
#     "noble",
#     "peace",
#     "tower",
#     "vista",
#     "deify",
#     "faith",
#     "light",
#     "faith",
#     "glass",
#     "peace",
#     "holy",
#     "saint",
#     "spire",
#     "faith",
#     "quiet",
#     "saint",
#     "hymns",
#     "chapel",
#     "bless",
#     "faith",
#     "heart",
#     "Latin",
#     "grace",
#     "faith",
#     "angel",
#     "stone",
#     "peace",
#     "chapel",
#     "faith",
#     "saint",
#     "cross",
#     "vista",
#     "clove",
#     "crypt",
#     "mural",
#     "noble",
#     "robot",
#     "bytes",
#     "logic",
#     "AI",
#     "code",
#     "data",
#     "chips",
#     "crash",
#     "debug",
#     "files",
#     "laser",
#     "debug",
#     "screen",
#     "modem",
#     "cloud",
#     "pixels",
#     "pixel",
#     "virus",
#     "bytes",
#     "input",
#     "output",
#     "micro",
#     "RAM",
#     "disk",
#     "email",
#     "server",
#     "mouse",
#     "click",
#     "smart",
#     "pixel",
#     "nodes",
#     "token",
#     "cache",
#     "stack",
#     "script",
#     "loops",
#     "router",
#     "logic",
#     "digital",
#     "codec",
#     "smart",
#     "drone",
#     "techy",
#     "debug",
#     "crash",
#     "probe",
#     "fluke",
#     "fiber",
#     "probe",
#     "pulse",
#     "RAM",
#     "pixel",
#     "floppy",
#     "stack",
#     "cache",
#     "smart",
#     "flash",
#     "links",
#     "disk",
#     "nodes",
#     "pulse",
#     "bytes",
#     "debug",
#     "logic",
#     "screw",
#     "opens",
#     "tears",
#     "fight",
#     "sword",
#     "Swoop",
#     "Quirk",
#     "Joust",
#     "Blaze",
#     "Fudge",
#     "Nudge",
#     "Plush",
#     "Grasp",
#     "Yacht",
#     "Rumba",
#     "Zebra",
#     "Mirth",
#     "Crave",
#     "Bliss",
#     "Giddy",
#     "Brisk",
#     "Fable",
#     "Muted",
#     "Latch",
#     "Flair",
# ]

# # filter out words that are not 5 letters
# words = [w for w in words if len(w) == 5]

# # filter out words that have duplicate letters
# words = [w for w in words if len(set(w)) == 5]

# # remove duplicates
# words = list(set(words))

# # pick 64 random words
# words = random.sample(words, 64)

# print(words)

words = [
    "notre",
    "clove",
    "email",
    "heart",
    "pulse",
    "debug",
    "choir",
    "probe",
    "tower",
    "Joust",
    "Muted",
    "chips",
    "stack",
    "fight",
    "Fudge",
    "token",
    "Mirth",
    "Blaze",
    "bytes",
    "Fable",
    "tears",
    "pixel",
    "stone",
    "smart",
    "Crave",
    "mural",
    "deify",
    "spire",
    "nodes",
    "Brisk",
    "Rumba",
    "saint",
    "screw",
    "crypt",
    "virus",
    "micro",
    "Zebra",
    "relic",
    "input",
    "Quirk",
    "techy",
    "quiet",
    "crash",
    "light",
    "flash",
    "opens",
    "pious",
    "sword",
    "grace",
    "drone",
    "fluke",
    "organ",
    "Grasp",
    "files",
    "Yacht",
    "mouse",
    "links",
    "hymns",
    "Flair",
    "logic",
    "cloud",
    "angel",
    "laser",
    "Latch",
]

with open("verilog/rtl/words_data.txt", "w") as f:
    for w in words:
        # write the binary representation of the word
        # use lower case letters
        # a = 5'b00000, b = 5'b00001, etc.
        # first letter goes at the start of the word
        # MSbit is the last bit of the first letter

        # convert to lower case
        w = w.lower()

        # convert to binary
        x = [bin(ord(c) - ord("a"))[2:].zfill(5) for c in w]

        # ex word: clove
        # 00010 ..... ..... ..... 00100

        # print(w)
        # write ..... ..... ..... ..... ..... for this word
        for l in x:
            f.write(l)
            f.write(" ")

        # write a newline
        f.write(f" // {w}\n")
